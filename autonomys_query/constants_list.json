[
    {
        "module": "System",
        "name": "BlockWeights",
        "description": "Block & extrinsics weights: base values and limits."
    },
    {
        "module": "System",
        "name": "BlockLength",
        "description": "The maximum length of a block (in bytes)."
    },
    {
        "module": "System",
        "name": "BlockHashCount",
        "description": "Maximum number of block number to block hash mappings to keep (oldest pruned first)."
    },
    {
        "module": "System",
        "name": "DbWeight",
        "description": "The weight of runtime database operations the runtime can invoke."
    },
    {
        "module": "System",
        "name": "Version",
        "description": "Get the chain's in-code version."
    },
    {
        "module": "Timestamp",
        "name": "SS58Prefix",
        "description": "The designated SS58 prefix of this chain.   This replaces the \"ss58Format\" property declared in the chain spec. Reason is  that the runtime should know about the prefix in order to make use of it as  an identifier of the chain."
    },
    {
        "module": "Subspace",
        "name": "MinimumPeriod",
        "description": "The minimum period between blocks.   Be aware that this is different to the *expected* period that the block production  apparatus provides. Your chosen consensus system will generally work with this to  determine a sensible block time. For example, in the Aura pallet it will be double this  period on default settings."
    },
    {
        "module": "Subspace",
        "name": "BlockAuthoringDelay",
        "description": "Number of slots between slot arrival and when corresponding block can be produced.   Practically this means future proof of time proof needs to be revealed this many slots  ahead before block can be authored even though solution is available before that."
    },
    {
        "module": "Subspace",
        "name": "PotEntropyInjectionInterval",
        "description": "Interval, in blocks, between blockchain entropy injection into proof of time chain."
    },
    {
        "module": "Subspace",
        "name": "PotEntropyInjectionLookbackDepth",
        "description": "Interval, in entropy injection intervals, where to take entropy for injection from."
    },
    {
        "module": "Subspace",
        "name": "PotEntropyInjectionDelay",
        "description": "Delay after block, in slots, when entropy injection takes effect."
    },
    {
        "module": "Subspace",
        "name": "EraDuration",
        "description": "The amount of time, in blocks, that each era should last.  NOTE: Currently it is not possible to change the era duration after  the chain has started. Attempting to do so will brick block production."
    },
    {
        "module": "Subspace",
        "name": "InitialSolutionRange",
        "description": "Initial solution range used for challenges during the very first era."
    },
    {
        "module": "Subspace",
        "name": "SlotProbability",
        "description": "How often in slots slots (on average, not counting collisions) will have a block.   Expressed as a rational where the first member of the tuple is the  numerator and the second is the denominator. The rational should  represent a value between 0 and 1."
    },
    {
        "module": "Subspace",
        "name": "ConfirmationDepthK",
        "description": "Depth `K` after which a block enters the recorded history (a global constant, as opposed  to the client-dependent transaction confirmation depth `k`)."
    },
    {
        "module": "Subspace",
        "name": "RecentSegments",
        "description": "Number of latest archived segments that are considered \"recent history\"."
    },
    {
        "module": "Subspace",
        "name": "RecentHistoryFraction",
        "description": "Fraction of pieces from the \"recent history\" (`recent_segments`) in each sector."
    },
    {
        "module": "Subspace",
        "name": "MinSectorLifetime",
        "description": "Minimum lifetime of a plotted sector, measured in archived segment."
    },
    {
        "module": "Subspace",
        "name": "ExpectedVotesPerBlock",
        "description": "Number of votes expected per block.   This impacts solution range for votes in consensus."
    },
    {
        "module": "Subspace",
        "name": "MaxPiecesInSector",
        "description": "How many pieces one sector is supposed to contain (max)"
    },
    {
        "module": "Rewards",
        "name": "BlockSlotCount",
        "description": "Maximum number of block number to block slot mappings to keep (oldest pruned first)."
    },
    {
        "module": "Rewards",
        "name": "AvgBlockspaceUsageNumBlocks",
        "description": "Number of blocks over which to compute average blockspace usage"
    },
    {
        "module": "Rewards",
        "name": "TransactionByteFee",
        "description": "Cost of one byte of blockspace"
    },
    {
        "module": "Rewards",
        "name": "MaxRewardPoints",
        "description": "Max number of reward points"
    },
    {
        "module": "Balances",
        "name": "ProposerTaxOnVotes",
        "description": "Tax of the proposer on vote rewards"
    },
    {
        "module": "Balances",
        "name": "ExistentialDeposit",
        "description": "The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!   If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for  this pallet. However, you do so at your own risk: this will open up a major DoS vector.  In case you have multiple sources of provider references, you may also get unexpected  behaviour if you set this to zero.   Bottom line: Do yourself a favour and make it at least one!"
    },
    {
        "module": "Balances",
        "name": "MaxLocks",
        "description": "The maximum number of locks that should exist on an account.  Not strictly enforced, but used for weight estimation.   Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
    },
    {
        "module": "Balances",
        "name": "MaxReserves",
        "description": "The maximum number of named reserves that can exist on an account.   Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
    },
    {
        "module": "TransactionFees",
        "name": "MaxFreezes",
        "description": "The maximum number of individual freeze locks that can exist on an account at any time."
    },
    {
        "module": "TransactionFees",
        "name": "MinReplicationFactor",
        "description": "Minimum desired number of replicas of the blockchain to be stored by the network,  impacts storage fees."
    },
    {
        "module": "TransactionFees",
        "name": "CreditSupply",
        "description": "How many credits there is in circulation."
    },
    {
        "module": "TransactionFees",
        "name": "TotalSpacePledged",
        "description": "How much space there is on the network."
    },
    {
        "module": "TransactionPayment",
        "name": "BlockchainHistorySize",
        "description": "How big is the history of the blockchain in archived state (thus includes erasure  coding, but not replication)."
    },
    {
        "module": "Utility",
        "name": "OperationalFeeMultiplier",
        "description": "A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their  `priority`   This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later  added to a tip component in regular `priority` calculations.  It means that a `Normal` transaction can front-run a similarly-sized `Operational`  extrinsic (with no tip), by including a tip value greater than the virtual tip.   ```rust,ignore  // For `Normal`  let priority = priority_calc(tip);   // For `Operational`  let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;  let priority = priority_calc(tip + virtual_tip);  ```   Note that since we use `final_fee` the multiplier applies also to the regular `tip`  sent with the transaction. So, not only does the transaction get a priority bump based  on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`  transactions."
    },
    {
        "module": "Domains",
        "name": "batched_calls_limit",
        "description": "The limit on the number of batched calls."
    },
    {
        "module": "Domains",
        "name": "ConfirmationDepthK",
        "description": "Same with `pallet_subspace::Config::ConfirmationDepthK`."
    },
    {
        "module": "Domains",
        "name": "DomainRuntimeUpgradeDelay",
        "description": "Delay before a domain runtime is upgraded."
    },
    {
        "module": "Domains",
        "name": "BlockTreePruningDepth",
        "description": "The block tree pruning depth."
    },
    {
        "module": "Domains",
        "name": "ConsensusSlotProbability",
        "description": "Consensus chain slot probability."
    },
    {
        "module": "Domains",
        "name": "MaxDomainBlockSize",
        "description": "The maximum block size limit for all domain."
    },
    {
        "module": "Domains",
        "name": "MaxDomainBlockWeight",
        "description": "The maximum block weight limit for all domain."
    },
    {
        "module": "Domains",
        "name": "MaxDomainNameLength",
        "description": "The maximum domain name length limit for all domain."
    },
    {
        "module": "Domains",
        "name": "DomainInstantiationDeposit",
        "description": "The amount of fund to be locked up for the domain instance creator."
    },
    {
        "module": "Domains",
        "name": "InitialDomainTxRange",
        "description": "Initial domain tx range value."
    },
    {
        "module": "Domains",
        "name": "DomainTxRangeAdjustmentInterval",
        "description": "Domain tx range is adjusted after every DomainTxRangeAdjustmentInterval blocks."
    },
    {
        "module": "Domains",
        "name": "MinOperatorStake",
        "description": "Minimum operator stake required to become operator of a domain."
    },
    {
        "module": "Domains",
        "name": "MinNominatorStake",
        "description": "Minimum nominator stake required to nominate and operator."
    },
    {
        "module": "Domains",
        "name": "StakeWithdrawalLockingPeriod",
        "description": "Minimum number of blocks after which any finalized withdrawals are released to nominators."
    },
    {
        "module": "Domains",
        "name": "StakeEpochDuration",
        "description": "Domain epoch transition interval"
    },
    {
        "module": "Domains",
        "name": "TreasuryAccount",
        "description": "Treasury account."
    },
    {
        "module": "Domains",
        "name": "MaxPendingStakingOperation",
        "description": "The maximum number of pending staking operation that can perform upon epoch transition."
    },
    {
        "module": "Domains",
        "name": "PalletId",
        "description": "The pallet-domains's pallet id."
    },
    {
        "module": "Domains",
        "name": "BundleLongevity",
        "description": "How many block a bundle should still consider as valid after produced"
    },
    {
        "module": "Messenger",
        "name": "WithdrawalLimit",
        "description": "The max number of withdrawals per nominator that may exist at any time,  once this limit is reached, the nominator need to unlock the withdrawal  before requesting new withdrawal."
    },
    {
        "module": "Messenger",
        "name": "ChannelReserveFee",
        "description": "Channel reserve fee to open a channel."
    },
    {
        "module": "Scheduler",
        "name": "ChannelInitReservePortion",
        "description": "Portion of Channel reserve taken by the protocol  if the channel is in init state and is requested to be closed."
    },
    {
        "module": "Scheduler",
        "name": "MaximumWeight",
        "description": "The maximum weight that may be scheduled per block for any dispatchables."
    },
    {
        "module": "Council",
        "name": "MaxScheduledPerBlock",
        "description": "The maximum number of scheduled calls in the queue for a single block.   NOTE:  + Dependent pallets' benchmarks might require a higher limit for the setting. Set a  higher limit under `runtime-benchmarks` feature."
    },
    {
        "module": "Democracy",
        "name": "MaxProposalWeight",
        "description": "The maximum weight of a dispatch call that can be proposed and executed."
    },
    {
        "module": "Democracy",
        "name": "EnactmentPeriod",
        "description": "The period between a proposal being approved and enacted.   It should generally be a little more than the unstake period to ensure that  voting stakers have an opportunity to remove themselves from the system in the case  where they are on the losing side of a vote."
    },
    {
        "module": "Democracy",
        "name": "LaunchPeriod",
        "description": "How often (in blocks) new public referenda are launched."
    },
    {
        "module": "Democracy",
        "name": "VotingPeriod",
        "description": "How often (in blocks) to check for new votes."
    },
    {
        "module": "Democracy",
        "name": "VoteLockingPeriod",
        "description": "The minimum period of vote locking.   It should be no shorter than enactment period to ensure that in the case of an approval,  those successful voters are locked into the consequences that their votes entail."
    },
    {
        "module": "Democracy",
        "name": "MinimumDeposit",
        "description": "The minimum amount to be used as a deposit for a public referendum proposal."
    },
    {
        "module": "Democracy",
        "name": "InstantAllowed",
        "description": "Indicator for whether an emergency origin is even allowed to happen. Some chains may  want to set this permanently to `false`, others may want to condition it on things such  as an upgrade having happened recently."
    },
    {
        "module": "Democracy",
        "name": "FastTrackVotingPeriod",
        "description": "Minimum voting period allowed for a fast-track referendum."
    },
    {
        "module": "Democracy",
        "name": "CooloffPeriod",
        "description": "Period in blocks where an external proposal may not be re-submitted after being vetoed."
    },
    {
        "module": "Democracy",
        "name": "MaxVotes",
        "description": "The maximum number of votes for an account.   Also used to compute weight, an overly big value can  lead to extrinsic with very big weight: see `delegate` for instance."
    },
    {
        "module": "Democracy",
        "name": "MaxProposals",
        "description": "The maximum number of public proposals that can exist at any time."
    },
    {
        "module": "Democracy",
        "name": "MaxDeposits",
        "description": "The maximum number of deposits a public proposal may have at any time."
    },
    {
        "module": "Sudo",
        "name": "MaxBlacklisted",
        "description": "The maximum number of items which can be blacklisted."
    }
]